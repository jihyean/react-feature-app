import { SvelteComponentTyped } from "svelte";
import { GanttUtils } from './utils/utils';
import { GanttApi } from './core/api';
import { TaskFactory } from './core/task';
import type { SvelteTask } from './core/task';
import { RowFactory } from './core/row';
import { TimeRangeFactory } from './core/timeRange';
import { DragDropManager } from './core/drag';
import type { HighlightedDurations, Column as IColumn } from './core/column';
import type { SvelteGanttDateAdapter } from './utils/date';
declare const __propDef: {
    props: {
        [x: string]: any;
        rows: any;
        tasks?: any[];
        timeRanges?: any[];
        rowPadding?: number;
        rowHeight?: number;
        from: any;
        to: any;
        minWidth?: number;
        fitWidth?: boolean;
        classes?: any[];
        headers?: {
            unit: string;
            format: string;
        }[];
        zoomLevels?: {
            headers: ({
                unit: string;
                format: string;
                offset?: undefined;
            } | {
                unit: string;
                format: string;
                offset: number;
            })[];
            minWidth: number;
            fitWidth: boolean;
        }[];
        taskContent?: any;
        tableWidth?: number;
        resizeHandleWidth?: number;
        onTaskButtonClick?: any;
        dateAdapter?: SvelteGanttDateAdapter;
        magnetUnit?: string;
        magnetOffset?: number;
        columnUnit?: string;
        columnOffset?: number;
        ganttTableModules?: any[];
        ganttBodyModules?: any[];
        reflectOnParentRows?: boolean;
        reflectOnChildRows?: boolean;
        useCanvasColumns?: boolean;
        columnStrokeColor?: string;
        columnStrokeWidth?: number;
        highlightedDurations: HighlightedDurations;
        highlightColor?: string;
        taskElementHook?: any;
        layout?: 'overlap' | 'pack';
        columnService?: {
            getColumnByDate(date: number): IColumn;
            getColumnByPosition(x: number): IColumn;
            getPositionByDate(date: number): any;
            getDateByPosition(x: number): any;
            /**
             * TODO: remove, currently unused
             * @param {number} date - Date
             * @returns {number} rounded date passed as parameter
             */
            roundTo(date: number): number;
        };
        api?: GanttApi;
        taskFactory?: TaskFactory;
        rowFactory?: RowFactory;
        dndManager?: DragDropManager;
        timeRangeFactory?: TimeRangeFactory;
        utils?: GanttUtils;
        refreshTimeRanges?: () => void;
        refreshTasks?: () => void;
        getRowContainer?: () => HTMLElement;
        selectTask?: (id: any) => void;
        unselectTasks?: () => void;
        scrollToRow?: (id: any, scrollBehavior?: string) => void;
        scrollToTask?: (id: any, scrollBehavior?: string) => void;
        updateTask?: (model: any) => void;
        updateTasks?: (taskModels: any) => void;
        updateRow?: (model: any) => void;
        updateRows?: (rowModels: any) => void;
        getRow?: (resourceId: any) => import("./core/row").SvelteRow;
        getTask?: (id: any) => SvelteTask;
        getTasks?: (resourceId: any) => any;
    };
    events: {
        [evt: string]: CustomEvent<any>;
    };
    slots: {};
};
export type GanttProps = typeof __propDef.props;
export type GanttEvents = typeof __propDef.events;
export type GanttSlots = typeof __propDef.slots;
export default class Gantt extends SvelteComponentTyped<GanttProps, GanttEvents, GanttSlots> {
    get columnService(): {
        getColumnByDate(date: number): IColumn;
        getColumnByPosition(x: number): IColumn;
        getPositionByDate(date: number): any;
        getDateByPosition(x: number): any;
        /**
         * TODO: remove, currently unused
         * @param {number} date - Date
         * @returns {number} rounded date passed as parameter
         */
        roundTo(date: number): number;
    };
    get api(): GanttApi;
    get taskFactory(): TaskFactory;
    get rowFactory(): RowFactory;
    get dndManager(): DragDropManager;
    get timeRangeFactory(): TimeRangeFactory;
    get utils(): GanttUtils;
    get refreshTimeRanges(): () => void;
    get refreshTasks(): () => void;
    get getRowContainer(): () => HTMLElement;
    get selectTask(): (id: any) => void;
    get unselectTasks(): () => void;
    get scrollToRow(): (id: any, scrollBehavior?: string) => void;
    get scrollToTask(): (id: any, scrollBehavior?: string) => void;
    get updateTask(): (model: any) => void;
    get updateTasks(): (taskModels: any) => void;
    get updateRow(): (model: any) => void;
    get updateRows(): (rowModels: any) => void;
    get getRow(): (resourceId: any) => import("./core/row").SvelteRow;
    get getTask(): (id: any) => SvelteTask;
    get getTasks(): (resourceId: any) => any;
}
export {};
